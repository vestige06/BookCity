<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('User', 'doctrine');

/**
 * BaseUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $uid
 * @property string $name
 * @property string $password
 * @property integer $user_category_id
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property UserCategory $UserCategory
 * @property Doctrine_Collection $Client
 * 
 * @method integer             getUid()              Returns the current record's "uid" value
 * @method string              getName()             Returns the current record's "name" value
 * @method string              getPassword()         Returns the current record's "password" value
 * @method integer             getUserCategoryId()   Returns the current record's "user_category_id" value
 * @method timestamp           getCreatedAt()        Returns the current record's "created_at" value
 * @method timestamp           getUpdatedAt()        Returns the current record's "updated_at" value
 * @method UserCategory        getUserCategory()     Returns the current record's "UserCategory" value
 * @method Doctrine_Collection getClient()           Returns the current record's "Client" collection
 * @method User                setUid()              Sets the current record's "uid" value
 * @method User                setName()             Sets the current record's "name" value
 * @method User                setPassword()         Sets the current record's "password" value
 * @method User                setUserCategoryId()   Sets the current record's "user_category_id" value
 * @method User                setCreatedAt()        Sets the current record's "created_at" value
 * @method User                setUpdatedAt()        Sets the current record's "updated_at" value
 * @method User                setUserCategory()     Sets the current record's "UserCategory" value
 * @method User                setClient()           Sets the current record's "Client" collection
 * 
 * @package    BookCity
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('user');
        $this->hasColumn('uid', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('name', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('password', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('user_category_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('UserCategory', array(
             'local' => 'user_category_id',
             'foreign' => 'user_category_id'));

        $this->hasMany('Client', array(
             'local' => 'uid',
             'foreign' => 'uid'));
    }
}